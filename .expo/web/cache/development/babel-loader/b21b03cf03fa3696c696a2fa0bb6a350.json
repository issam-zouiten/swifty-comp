{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"animated\", \"borderColor\", \"borderWidth\", \"children\", \"color\", \"progress\", \"rotation\", \"size\", \"style\", \"unfilledColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg } from 'react-native-svg';\nimport Circle from \"./Shapes/Circle\";\nimport Sector from \"./Shapes/Sector\";\nimport withAnimation from \"./withAnimation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CIRCLE = Math.PI * 2;\nvar AnimatedSvg = Animated.createAnimatedComponent(Svg);\nvar AnimatedSector = Animated.createAnimatedComponent(Sector);\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden'\n  }\n});\nexport var ProgressPie = function (_Component) {\n  _inherits(ProgressPie, _Component);\n\n  var _super = _createSuper(ProgressPie);\n\n  function ProgressPie() {\n    _classCallCheck(this, ProgressPie);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ProgressPie, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          animated = _this$props.animated,\n          borderColor = _this$props.borderColor,\n          borderWidth = _this$props.borderWidth,\n          children = _this$props.children,\n          color = _this$props.color,\n          progress = _this$props.progress,\n          rotation = _this$props.rotation,\n          size = _this$props.size,\n          style = _this$props.style,\n          unfilledColor = _this$props.unfilledColor,\n          restProps = _objectWithoutProperties(_this$props, _excluded);\n\n      var Surface = rotation ? AnimatedSvg : Svg;\n      var Shape = animated ? AnimatedSector : Sector;\n      var angle = animated ? Animated.multiply(progress, CIRCLE) : progress * CIRCLE;\n      var radius = size / 2 - borderWidth;\n      var offset = {\n        top: borderWidth,\n        left: borderWidth\n      };\n      return _jsxs(View, _objectSpread(_objectSpread({\n        style: [styles.container, style]\n      }, restProps), {}, {\n        children: [_jsxs(Surface, {\n          width: size,\n          height: size,\n          style: rotation ? {\n            transform: [{\n              rotate: rotation.interpolate({\n                inputRange: [0, 1],\n                outputRange: ['0deg', '360deg']\n              })\n            }]\n          } : undefined,\n          children: [unfilledColor ? _jsx(Circle, {\n            radius: radius,\n            offset: offset,\n            fill: unfilledColor\n          }) : false, _jsx(Shape, {\n            radius: radius,\n            angle: angle,\n            offset: offset,\n            fill: color\n          }), borderWidth ? _jsx(Circle, {\n            radius: size / 2,\n            stroke: borderColor || color,\n            strokeWidth: borderWidth\n          }) : false]\n        }), children]\n      }));\n    }\n  }]);\n\n  return ProgressPie;\n}(Component);\nProgressPie.propTypes = {\n  animated: PropTypes.bool,\n  borderColor: PropTypes.string,\n  borderWidth: PropTypes.number,\n  color: PropTypes.string,\n  children: PropTypes.node,\n  progress: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Animated.Value)]),\n  rotation: PropTypes.instanceOf(Animated.Value),\n  size: PropTypes.number,\n  style: PropTypes.any,\n  unfilledColor: PropTypes.string\n};\nProgressPie.defaultProps = {\n  borderWidth: 1,\n  color: 'rgba(0, 122, 255, 1)',\n  progress: 0,\n  size: 40\n};\nexport default withAnimation(ProgressPie, 0.2);","map":{"version":3,"sources":["/Users/pc/Desktop/swifty-comp/node_modules/react-native-progress/Pie.js"],"names":["React","Component","PropTypes","Svg","Circle","Sector","withAnimation","CIRCLE","Math","PI","AnimatedSvg","Animated","createAnimatedComponent","AnimatedSector","styles","StyleSheet","create","container","backgroundColor","overflow","ProgressPie","props","animated","borderColor","borderWidth","children","color","progress","rotation","size","style","unfilledColor","restProps","Surface","Shape","angle","multiply","radius","offset","top","left","transform","rotate","interpolate","inputRange","outputRange","undefined","propTypes","bool","string","number","node","oneOfType","instanceOf","Value","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { Svg } from 'react-native-svg';\n\nimport Circle from './Shapes/Circle';\nimport Sector from './Shapes/Sector';\nimport withAnimation from './withAnimation';\n\nconst CIRCLE = Math.PI * 2;\n\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\nconst AnimatedSector = Animated.createAnimatedComponent(Sector);\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n});\n\nexport class ProgressPie extends Component {\n  static propTypes = {\n    animated: PropTypes.bool,\n    borderColor: PropTypes.string,\n    borderWidth: PropTypes.number,\n    color: PropTypes.string,\n    children: PropTypes.node,\n    progress: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.instanceOf(Animated.Value),\n    ]),\n    rotation: PropTypes.instanceOf(Animated.Value),\n    size: PropTypes.number,\n    style: PropTypes.any,\n    unfilledColor: PropTypes.string,\n  };\n\n  static defaultProps = {\n    borderWidth: 1,\n    color: 'rgba(0, 122, 255, 1)',\n    progress: 0,\n    size: 40,\n  };\n\n  render() {\n    const {\n      animated,\n      borderColor,\n      borderWidth,\n      children,\n      color,\n      progress,\n      rotation,\n      size,\n      style,\n      unfilledColor,\n      ...restProps\n    } = this.props;\n\n    const Surface = rotation ? AnimatedSvg : Svg;\n    const Shape = animated ? AnimatedSector : Sector;\n\n    const angle = animated\n      ? Animated.multiply(progress, CIRCLE)\n      : progress * CIRCLE;\n    const radius = size / 2 - borderWidth;\n    const offset = {\n      top: borderWidth,\n      left: borderWidth,\n    };\n\n    return (\n      <View style={[styles.container, style]} {...restProps}>\n        <Surface\n          width={size}\n          height={size}\n          style={\n            rotation\n              ? {\n                  transform: [\n                    {\n                      rotate: rotation.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: ['0deg', '360deg'],\n                      }),\n                    },\n                  ],\n                }\n              : undefined\n          }\n        >\n          {unfilledColor ? (\n            <Circle radius={radius} offset={offset} fill={unfilledColor} />\n          ) : (\n            false\n          )}\n          <Shape radius={radius} angle={angle} offset={offset} fill={color} />\n          {borderWidth ? (\n            <Circle\n              radius={size / 2}\n              stroke={borderColor || color}\n              strokeWidth={borderWidth}\n            />\n          ) : (\n            false\n          )}\n        </Surface>\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default withAnimation(ProgressPie, 0.2);\n"]},"metadata":{},"sourceType":"module"}